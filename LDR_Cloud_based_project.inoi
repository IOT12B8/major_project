
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"


// Lamp pin
const int lamp_pin = 4;

#define PHOTOCELL       A0  // analog 0

/************************* WiFi Access Point *********************************/

#define WLAN_SSID       "NISHANTH"
#define WLAN_PASS       "password"

/************************* Adafruit.io Setup *********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    " ESAITHEKING "
#define AIO_KEY         " B78998J98234T657129I256G734026 "

/************ Global State  ******************/

//  To Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;

// To Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/


// To Setup a feed called 'photocell' for publishing.
Adafruit_MQTT_Publish photocell = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/photocell");


// To Setup a feed called 'onoff' for subscribing to changes to the button
Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/onoff", MQTT_QOS_1);

/*************************** Sketch Code ************************************/


void onoffcallback(char *data, uint16_t len) {
  Serial.print("Hey we're in a onoff callback, the button value is: ");
  Serial.println(data);

     String message = String(data);
      message.trim();
      if (message == "ON") {digitalWrite(lamp_pin, HIGH);}
      if (message == "OFF") {digitalWrite(lamp_pin, LOW);}
  
}


void setup() {

  pinMode(lamp_pin, OUTPUT);
  
    
  Serial.begin(115200);
  delay(10);


  // Connect to WiFi access point. 
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());


  onoffbutton.setCallback(onoffcallback);

  mqtt.subscribe(&onoffbutton);

}

uint32_t x=0;

void loop() {
  MQTT_connect();


  int LDR = analogRead(PHOTOCELL);
  
  Serial.print(F("\nSending photocell val "));
  Serial.print(LDR);
  Serial.print("...");
  if (! photocell.publish(LDR)) {
    Serial.println(F("Failed"));
  } else {
    Serial.println(F("OK!"));
  }



  // this is our 'wait for incoming subscription packets and callback em' busy subloop
  mqtt.processPackets(500);
  
  // ping the server to keep the mqtt connection alive

}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 10 seconds...");
       mqtt.disconnect();
       delay(10000);  // wait 10 seconds
       retries--;
       if (retries == 0) {        
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}
